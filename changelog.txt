#---------------------------------- 0.25.2 -----------------------------------
[added] result() function to get the result of a previously-known taskid, and
    get_task() utility function for getting a task by name. Thanks to Github
    user https://github.com/jpassaro for the initial PR.
[added] results() function for fetching multiple results
[added] real sphinx docs for the package available:
    https://pythonhosted.org/rpqueue/
#---------------------------------- 0.25.1 -----------------------------------
[fixed] actually apply cron task fix :P
#---------------------------------- 0.25.0 -----------------------------------
[fixed] cron tasks will now save the results of their execution if requested,
    the argument to make this happen was mistakenly not passed onto the class
    that handles all of this. Thank you to github user
    https://github.com/jpassaro for the bug report and PR
[added] the ability to use a "prefix" to allow namespacing of rpqueue queues
    on the same Redis server. See `rpqueue.set_prefix()`
[added] the ability to instantiate a new rpqueue "state", for running parallel
    task execution systems with different prefixes, connections, etc. See
    `rpqueue.new_rpqueue(name, pfix=None)`
[added] warning-laced support for Python 3.x. The tests pass :P
#---------------------------------- 0.24.1 -----------------------------------
[added] the ability to call a single function after worker processes have been
    created. `import rom; rom.AFTER_FORK = fcn` - put this in the same module
    that imports all of your tasks (the module referred to in --module), and
    the function will be run in the newly forked child, just prior to starting
    worker threads
#---------------------------------- 0.24.0 -----------------------------------
[changed] forced a hard requirement on the Redis client to be 2.4.12 or later
    to remove the unnecessary thread/fork-safe pooling. The Redis client has
    been thread/fork safe since 2.4.12 (though got better multiple thread
    post-fork support in 2.9.0)
[changed] added rpqueue.set_redis_connection() for manually setting additional
    options (note that you can also just say `rpqueue.POOL = conn`)
#----------------------------------- 0.23 ------------------------------------
[added] --loglevel and --successlevel to set the minimum log level to print
    and the log level that "SUCCESS: Task completed:" messages are sent at
    when using `python -m rpqueue.run ...` invocation. Initial patch thanks
    to: https://github.com/zenweasel
[added] when running rpqueue via `rpqueue.execute_tasks()`, you can set the
    log level and success log level (--loglevel and --successlevel, mentioned
    above) via setting the rpqueue.LOG_LEVEL and rpqueue.SUCCESS_LOG_LEVEL
    attributes to one of: 'DEBUG', 'INFO', 'WARNING', or 'ERROR' .
[updated] the Lua script runner wrapper we use for delayed task execution to
    be cleaner.
#----------------------------------- 0.22 ------------------------------------
[fixed] setup.py-based installations. Ran into the bug myself :/
#----------------------------------- 0.21 ------------------------------------
[changed] where available, rpqueue will now use Lua to move delayed tasks from
    the time-based priority queue to fifo queues. This should reduce overhead
    in all cases, and should drastically improve performance for those that
    use large numbers of delayed tasks.
[changed] the version number is now PEP 386/440 compliant.
[added] this changelog that will document updates/changes/improvements in an
    easily referenced location.
[fixed] thanks to https://github.com/dmaust , rpqueue added a missing 'redis'
    requirement.
